//
//  EmojicodeInstructions.h
//  Emojicode
//
//  Created by Theo Weidmann on 26/11/2016.
//  Copyright © 2016 Theo Weidmann. All rights reserved.
//

#ifndef EmojicodeInstructions_h
#define EmojicodeInstructions_h

/// A number identifying the set of byte code instructions and layout in use
const int kByteCodeVersion = 6;

enum Instructions {
    INS_DISPATCH_METHOD = 0x1,
    INS_DISPATCH_TYPE_METHOD = 0x2,
    INS_DISPATCH_PROTOCOL = 0x3,
    INS_DISPATCH_SUPER = 0x4,
    INS_CALL_CONTEXTED_FUNCTION = 0x5,
    INS_CALL_FUNCTION = 0x6,
    INS_SUPER_INITIALIZER = 0x8,
    INS_NEW_OBJECT = 0x9,

    INS_JUMP_FORWARD = 0x10,
    INS_JUMP_FORWARD_IF = 0x11,
    INS_JUMP_BACKWARD_IF = 0x12,
    INS_JUMP_FORWARD_IF_NOT = 0x13,
    INS_JUMP_BACKWARD_IF_NOT = 0x14,
    INS_RETURN = 0x16,
    INS_TRANSFER_CONTROL_TO_NATIVE = 0x18,

    INS_THIS = 0x19,
    INS_SAME_OBJECT = 0x1A,

    INS_COPY_TO_STACK = 0x21,
    INS_COPY_TO_INSTANCE_VARIABLE = 0x22,
    INS_COPY_VT_VARIABLE = 0x23,
    INS_COPY_TO_STACK_SIZE = 0xB1,
    INS_COPY_TO_INSTANCE_VARIABLE_SIZE = 0xB2,
    INS_COPY_VT_VARIABLE_SIZE = 0xB3,

    INS_PUSH_SINGLE_STACK = 0x26,
    INS_PUSH_WITH_SIZE_STACK = 0x27,
    INS_PUSH_SINGLE_OBJECT = 0x28,
    INS_PUSH_WITH_SIZE_OBJECT = 0x29,
    INS_PUSH_SINGLE_VT = 0x2A,
    INS_PUSH_WITH_SIZE_VT = 0x2B,
    INS_PUSH_VALUE_FROM_REFERENCE = 0x2C,

    INS_PUSH_N = 0x24,

    INS_INCREMENT = 0x2D,
    INS_DECREMENT = 0x2E,

    INS_SIMPLE_OPTIONAL_PRODUCE = 0x30,
    INS_PUSH_ERROR = 0x25,
    INS_BOX_PRODUCE = 0x31,
    INS_UNBOX = 0x32,
    INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE = 0x33,
    INS_SIMPLE_OPTIONAL_TO_BOX = 0x34,
    INS_SIMPLE_OPTIONAL_TO_BOX_REMOTE = 0x35,
    INS_BOX_PRODUCE_REMOTE = 0x36,
    INS_UNBOX_REMOTE = 0x37,
    INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE_REMOTE = 0x38,

    INS_PUSH_VT_REFERENCE_STACK = 0x40,
    INS_PUSH_VT_REFERENCE_OBJECT = 0x41,
    INS_PUSH_VT_REFERENCE_VT = 0x42,
    INS_GET_CLASS_FROM_INSTANCE = 0x43,
    INS_GET_CLASS_FROM_INDEX = 0x44,
    INS_GET_STRING_POOL = 0x45,
    INS_GET_TRUE = 0x46,
    INS_GET_FALSE = 0x47,
    INS_GET_32_INTEGER = 0x48,
    INS_GET_64_INTEGER = 0x49,
    INS_GET_DOUBLE = 0x4A,
    INS_GET_SYMBOL = 0x4B,
    INS_GET_NOTHINGNESS = 0x4C,

    INS_EQUAL_PRIMITIVE = 0x50,
    INS_EQUAL_SYMBOL = 0x51,
    INS_SUBTRACT_INTEGER = 0x52,
    INS_ADD_INTEGER = 0x53,
    INS_MULTIPLY_INTEGER = 0x54,
    INS_DIVIDE_INTEGER = 0x55,
    INS_REMAINDER_INTEGER = 0x56,
    INS_BINARY_AND_INTEGER = 0x57,
    INS_BINARY_OR_INTEGER = 0x58,
    INS_BINARY_XOR_INTEGER = 0x59,
    INS_BINARY_NOT_INTEGER = 0x5A,
    INS_SHIFT_LEFT_INTEGER = 0x5B,
    INS_SHIFT_RIGHT_INTEGER = 0x5C,
    INS_GREATER_INTEGER = 0x5E,
    INS_GREATER_OR_EQUAL_INTEGER = 0x5F,

    INS_INVERT_BOOLEAN = 0x61,
    INS_OR_BOOLEAN = 0x62,
    INS_AND_BOOLEAN = 0x63,

    INS_EQUAL_DOUBLE = 0x64,
    INS_SUBTRACT_DOUBLE = 0x65,
    INS_ADD_DOUBLE = 0x66,
    INS_MULTIPLY_DOUBLE = 0x67,
    INS_DIVIDE_DOUBLE = 0x68,
    INS_GREATER_DOUBLE = 0x6A,
    INS_GREATER_OR_EQUAL_DOUBLE = 0x6C,
    INS_REMAINDER_DOUBLE = 0x6D,
    INS_INT_TO_DOUBLE = 0x6E,

    INS_UNWRAP_SIMPLE_OPTIONAL = 0x70,
    INS_UNWRAP_BOX_OPTIONAL = 0x71,
    INS_IS_NOTHINGNESS = 0x72,
    INS_ERROR_CHECK_SIMPLE_OPTIONAL = 0x73,
    INS_ERROR_CHECK_BOX_OPTIONAL = 0x74,
    INS_IS_ERROR = 0x75,

    // Know it’s an object instance and want to cast it to a subclass
    INS_DOWNCAST_TO_CLASS = 0x80,
    INS_CAST_TO_PROTOCOL = 0x81,
    INS_CAST_TO_CLASS = 0x82,
    INS_CAST_TO_VALUE_TYPE = 0x83,

    INS_EXECUTE_CALLABLE = 0x90,
    INS_CLOSURE = 0x91,
    INS_CAPTURE_METHOD = 0x92,
    INS_CAPTURE_TYPE_METHOD = 0x93,
    INS_CAPTURE_CONTEXTED_FUNCTION = 0x94,
    INS_CLOSURE_BOX = 0x95,
};

#include <stdio.h>

inline void pinsname(Instructions i) {switch(i) {
    case INS_DISPATCH_METHOD: puts("INS_DISPATCH_METHOD"); return;
    case INS_DISPATCH_TYPE_METHOD: puts("INS_DISPATCH_TYPE_METHOD"); return;
    case INS_DISPATCH_PROTOCOL: puts("INS_DISPATCH_PROTOCOL"); return;
    case INS_DISPATCH_SUPER: puts("INS_DISPATCH_SUPER"); return;
    case INS_CALL_CONTEXTED_FUNCTION: puts("INS_CALL_CONTEXTED_FUNCTION"); return;
    case INS_CALL_FUNCTION: puts("INS_CALL_FUNCTION"); return;
    case INS_SUPER_INITIALIZER: puts("INS_SUPER_INITIALIZER"); return;
    case INS_NEW_OBJECT: puts("INS_NEW_OBJECT"); return;
    case INS_JUMP_FORWARD: puts("INS_JUMP_FORWARD"); return;
    case INS_JUMP_FORWARD_IF: puts("INS_JUMP_FORWARD_IF"); return;
    case INS_JUMP_BACKWARD_IF: puts("INS_JUMP_BACKWARD_IF"); return;
    case INS_JUMP_FORWARD_IF_NOT: puts("INS_JUMP_FORWARD_IF_NOT"); return;
    case INS_JUMP_BACKWARD_IF_NOT: puts("INS_JUMP_BACKWARD_IF_NOT"); return;
    case INS_RETURN: puts("INS_RETURN"); return;
    case INS_TRANSFER_CONTROL_TO_NATIVE: puts("INS_TRANSFER_CONTROL_TO_NATIVE"); return;
    case INS_THIS: puts("INS_THIS"); return;
    case INS_SAME_OBJECT: puts("INS_SAME_OBJECT"); return;
    case INS_COPY_TO_STACK: puts("INS_COPY_TO_STACK"); return;
    case INS_COPY_TO_INSTANCE_VARIABLE: puts("INS_COPY_TO_INSTANCE_VARIABLE"); return;
    case INS_COPY_VT_VARIABLE: puts("INS_COPY_VT_VARIABLE"); return;
    case INS_COPY_TO_STACK_SIZE: puts("INS_COPY_TO_STACK_SIZE"); return;
    case INS_COPY_TO_INSTANCE_VARIABLE_SIZE: puts("INS_COPY_TO_INSTANCE_VARIABLE_SIZE"); return;
    case INS_COPY_VT_VARIABLE_SIZE: puts("INS_COPY_VT_VARIABLE_SIZE"); return;
    case INS_PUSH_SINGLE_STACK: puts("INS_PUSH_SINGLE_STACK"); return;
    case INS_PUSH_WITH_SIZE_STACK: puts("INS_PUSH_WITH_SIZE_STACK"); return;
    case INS_PUSH_SINGLE_OBJECT: puts("INS_PUSH_SINGLE_OBJECT"); return;
    case INS_PUSH_WITH_SIZE_OBJECT: puts("INS_PUSH_WITH_SIZE_OBJECT"); return;
    case INS_PUSH_SINGLE_VT: puts("INS_PUSH_SINGLE_VT"); return;
    case INS_PUSH_WITH_SIZE_VT: puts("INS_PUSH_WITH_SIZE_VT"); return;
    case INS_PUSH_VALUE_FROM_REFERENCE: puts("INS_PUSH_VALUE_FROM_REFERENCE"); return;
    case INS_PUSH_ERROR: puts("INS_PUSH_ERROR"); return;
    case INS_INCREMENT: puts("INS_INCREMENT"); return;
    case INS_DECREMENT: puts("INS_DECREMENT"); return;
    case INS_SIMPLE_OPTIONAL_PRODUCE: puts("INS_SIMPLE_OPTIONAL_PRODUCE"); return;
    case INS_BOX_PRODUCE: puts("INS_BOX_PRODUCE"); return;
    case INS_UNBOX: puts("INS_UNBOX"); return;
    case INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE: puts("INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE"); return;
    case INS_SIMPLE_OPTIONAL_TO_BOX: puts("INS_SIMPLE_OPTIONAL_TO_BOX"); return;
    case INS_SIMPLE_OPTIONAL_TO_BOX_REMOTE: puts("INS_SIMPLE_OPTIONAL_TO_BOX_REMOTE"); return;
    case INS_BOX_PRODUCE_REMOTE: puts("INS_BOX_PRODUCE_REMOTE"); return;
    case INS_UNBOX_REMOTE: puts("INS_UNBOX_REMOTE"); return;
    case INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE_REMOTE: puts("INS_BOX_TO_SIMPLE_OPTIONAL_PRODUCE_REMOTE"); return;
    case INS_PUSH_VT_REFERENCE_STACK: puts("INS_PUSH_VT_REFERENCE_STACK"); return;
    case INS_PUSH_VT_REFERENCE_OBJECT: puts("INS_PUSH_VT_REFERENCE_OBJECT"); return;
    case INS_PUSH_VT_REFERENCE_VT: puts("INS_PUSH_VT_REFERENCE_VT"); return;
    case INS_PUSH_N: puts("INS_PUSH_N"); return;
    case INS_GET_CLASS_FROM_INSTANCE: puts("INS_GET_CLASS_FROM_INSTANCE"); return;
    case INS_GET_CLASS_FROM_INDEX: puts("INS_GET_CLASS_FROM_INDEX"); return;
    case INS_GET_STRING_POOL: puts("INS_GET_STRING_POOL"); return;
    case INS_GET_TRUE: puts("INS_GET_TRUE"); return;
    case INS_GET_FALSE: puts("INS_GET_FALSE"); return;
    case INS_GET_32_INTEGER: puts("INS_GET_32_INTEGER"); return;
    case INS_GET_64_INTEGER: puts("INS_GET_64_INTEGER"); return;
    case INS_GET_DOUBLE: puts("INS_GET_DOUBLE"); return;
    case INS_GET_SYMBOL: puts("INS_GET_SYMBOL"); return;
    case INS_GET_NOTHINGNESS: puts("INS_GET_NOTHINGNESS"); return;
    case INS_EQUAL_PRIMITIVE: puts("INS_EQUAL_PRIMITIVE"); return;
    case INS_EQUAL_SYMBOL: puts("INS_EQUAL_SYMBOL"); return;
    case INS_SUBTRACT_INTEGER: puts("INS_SUBTRACT_INTEGER"); return;
    case INS_ADD_INTEGER: puts("INS_ADD_INTEGER"); return;
    case INS_MULTIPLY_INTEGER: puts("INS_MULTIPLY_INTEGER"); return;
    case INS_DIVIDE_INTEGER: puts("INS_DIVIDE_INTEGER"); return;
    case INS_REMAINDER_INTEGER: puts("INS_REMAINDER_INTEGER"); return;
    case INS_BINARY_AND_INTEGER: puts("INS_BINARY_AND_INTEGER"); return;
    case INS_BINARY_OR_INTEGER: puts("INS_BINARY_OR_INTEGER"); return;
    case INS_BINARY_XOR_INTEGER: puts("INS_BINARY_XOR_INTEGER"); return;
    case INS_BINARY_NOT_INTEGER: puts("INS_BINARY_NOT_INTEGER"); return;
    case INS_SHIFT_LEFT_INTEGER: puts("INS_SHIFT_LEFT_INTEGER"); return;
    case INS_SHIFT_RIGHT_INTEGER: puts("INS_SHIFT_RIGHT_INTEGER"); return;
    case INS_GREATER_INTEGER: puts("INS_GREATER_INTEGER"); return;
    case INS_GREATER_OR_EQUAL_INTEGER: puts("INS_GREATER_OR_EQUAL_INTEGER"); return;
    case INS_INVERT_BOOLEAN: puts("INS_INVERT_BOOLEAN"); return;
    case INS_OR_BOOLEAN: puts("INS_OR_BOOLEAN"); return;
    case INS_AND_BOOLEAN: puts("INS_AND_BOOLEAN"); return;
    case INS_EQUAL_DOUBLE: puts("INS_EQUAL_DOUBLE"); return;
    case INS_SUBTRACT_DOUBLE: puts("INS_SUBTRACT_DOUBLE"); return;
    case INS_ADD_DOUBLE: puts("INS_ADD_DOUBLE"); return;
    case INS_MULTIPLY_DOUBLE: puts("INS_MULTIPLY_DOUBLE"); return;
    case INS_DIVIDE_DOUBLE: puts("INS_DIVIDE_DOUBLE"); return;
    case INS_GREATER_DOUBLE: puts("INS_GREATER_DOUBLE"); return;
    case INS_GREATER_OR_EQUAL_DOUBLE: puts("INS_GREATER_OR_EQUAL_DOUBLE"); return;
    case INS_REMAINDER_DOUBLE: puts("INS_REMAINDER_DOUBLE"); return;
    case INS_INT_TO_DOUBLE: puts("INS_INT_TO_DOUBLE"); return;
    case INS_UNWRAP_SIMPLE_OPTIONAL: puts("INS_UNWRAP_SIMPLE_OPTIONAL"); return;
    case INS_UNWRAP_BOX_OPTIONAL: puts("INS_UNWRAP_BOX_OPTIONAL"); return;
    case INS_IS_NOTHINGNESS: puts("INS_IS_NOTHINGNESS"); return;
    case INS_ERROR_CHECK_SIMPLE_OPTIONAL: puts("INS_ERROR_CHECK_SIMPLE_OPTIONAL"); return;
    case INS_ERROR_CHECK_BOX_OPTIONAL: puts("INS_ERROR_CHECK_BOX_OPTIONAL"); return;
    case INS_IS_ERROR: puts("INS_IS_ERROR"); return;
    case INS_DOWNCAST_TO_CLASS: puts("INS_DOWNCAST_TO_CLASS"); return;
    case INS_CAST_TO_PROTOCOL: puts("INS_CAST_TO_PROTOCOL"); return;
    case INS_CAST_TO_CLASS: puts("INS_CAST_TO_CLASS"); return;
    case INS_CAST_TO_VALUE_TYPE: puts("INS_CAST_TO_VALUE_TYPE"); return;
    case INS_EXECUTE_CALLABLE: puts("INS_EXECUTE_CALLABLE"); return;
    case INS_CLOSURE: puts("INS_CLOSURE"); return;
    case INS_CAPTURE_METHOD: puts("INS_CAPTURE_METHOD"); return;
    case INS_CAPTURE_TYPE_METHOD: puts("INS_CAPTURE_TYPE_METHOD"); return;
    case INS_CAPTURE_CONTEXTED_FUNCTION: puts("INS_CAPTURE_CONTEXTED_FUNCTION"); return;
    case INS_CLOSURE_BOX: puts("INS_CLOSURE_BOX"); return;
}}

#endif /* EmojicodeInstructions_h */
